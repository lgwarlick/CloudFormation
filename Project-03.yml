AWSTemplateFormatVersion: 2010-09-09
Description: Creating a VPC containing a public subnet and a private subnet with a NAT gateway attached to it. 

Resources:

  projectThreeVPC:
    Description: The VPC that will hold the public and private subnets
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.30.0.0/16
      EnableDnsSupport: true

  projectThreeIGW:
    Description: Gateway for VPC to have connection to the internet
    Type: AWS::EC2::InternetGateway

  attachVPCGateway:
    Description: Attaching the internet gateway to the VPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: projectThreeVPC
      InternetGatewayId:
        Ref: projectThreeIGW
  
  projectThreePrivateSubnet:
    Description: The private subnet 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: projectThreeVPC
      CidrBlock: 10.30.10.0/24
      AvailabilityZone: us-east-2a
  
  projectThreePublicSubnet:
    Description: The public subnet
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: projectThreeVPC
      CidrBlock: 10.30.20.0/24
      AvailabilityZone: us-east-2a
  
  projectThreeNATGatewayEIP:
    Description: Elastic IP address for the NAT gateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  projectThreeNATGateway:
    Description: NAT Gateway that will allow private subnet access to internet
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt projectThreeNATGatewayEIP.AllocationId
      SubnetId: !Ref projectThreePublicSubnet

  ##
  # Routes
  ##

  projectThreeRouteToIGW:
    Description: Route to IGW for the public subnet
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref projectThreeIGW
      RouteTableId: !Ref projectThreePublicRouteTable

  projectThreeRouteNATGateway:
    Description: Route to the NAT gateway for the private subnet
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref projectThreeNATGateway
      RouteTableId: !Ref projectThreePrivateRouteTable

  ##
  # Route Tables
  ##

  projectThreePublicRouteTable:
    Description: Route table for the public subnet
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref projectThreeVPC

  projectThreePrivateRouteTable:
    Description: Route table for the pirvate subnet
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref projectThreeVPC
  
  ##
  # Associating the route tables with their subnets
  ##

  projectThreeRouteSubnetPublic:
    Description: Associating the public route table with the public subnet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref projectThreePublicRouteTable
      SubnetId: !Ref projectThreePublicSubnet

  projectThreeRouteSubnetPrivate:
    Description: Associating the private route table with the private subnet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref projectThreePrivateRouteTable
      SubnetId: !Ref projectThreePrivateSubnet


  ##
  # The actual EC2 Instance
  ##

  projectThreeEC2Instance:
    Description: A small EC2 instance running an Amazon Linux AMI. It is deployed to the private subnet and has the security group attached
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      ImageId: ami-06d4b7182ac3480fa
      InstanceType: t3.micro
      Monitoring: true
      # SecurityGroupIds:
      #   - Ref: projectTwoSecurityGroup
      SubnetId: 
        Ref: projectThreePrivateSubnet

  projectThreeEC2InstanceConnect:
    Description: To allow connecting to the EC2 in the private instance to test if it has connectivity to internet via NAT
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
         SubnetId: !Ref projectThreePrivateSubnet